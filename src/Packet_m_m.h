//
// Generated file, do not edit! Created by opp_msgtool 6.2 from Packet_m.msg.
//

#ifndef __PACKET_M_M_H
#define __PACKET_M_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class BasicPacket;
class RouteInfoPacket;
class DHCPRequest;
class DHCPResponse;
class DNSQuery;
class DNSResponse;
/**
 * Class generated from <tt>Packet_m.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet BasicPacket
 * {
 *     int sourceAddr;
 *     int destAddr;
 *     string data;
 *     int hopCount = 0;
 *     bool isFlooded = false;
 * }
 * </pre>
 */
class BasicPacket : public ::omnetpp::cPacket
{
  protected:
    int sourceAddr = 0;
    int destAddr = 0;
    omnetpp::opp_string data;
    int hopCount = 0;
    bool isFlooded_ = false;

  private:
    void copy(const BasicPacket& other);

  protected:
    bool operator==(const BasicPacket&) = delete;

  public:
    BasicPacket(const char *name=nullptr, short kind=0);
    BasicPacket(const BasicPacket& other);
    virtual ~BasicPacket();
    BasicPacket& operator=(const BasicPacket& other);
    virtual BasicPacket *dup() const override {return new BasicPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceAddr() const;
    virtual void setSourceAddr(int sourceAddr);

    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);

    virtual const char * getData() const;
    virtual void setData(const char * data);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual bool isFlooded() const;
    virtual void setIsFlooded(bool isFlooded);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BasicPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BasicPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Packet_m.msg:9</tt> by opp_msgtool.
 * <pre>
 * packet RouteInfoPacket
 * {
 *     int destAddr;          // Which destination was found
 *     int reporterAddr;      // Router reporting the route
 *     int gateToDestination; // Which gate leads to destination
 * }
 * </pre>
 */
class RouteInfoPacket : public ::omnetpp::cPacket
{
  protected:
    int destAddr = 0;
    int reporterAddr = 0;
    int gateToDestination = 0;

  private:
    void copy(const RouteInfoPacket& other);

  protected:
    bool operator==(const RouteInfoPacket&) = delete;

  public:
    RouteInfoPacket(const char *name=nullptr, short kind=0);
    RouteInfoPacket(const RouteInfoPacket& other);
    virtual ~RouteInfoPacket();
    RouteInfoPacket& operator=(const RouteInfoPacket& other);
    virtual RouteInfoPacket *dup() const override {return new RouteInfoPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);

    virtual int getReporterAddr() const;
    virtual void setReporterAddr(int reporterAddr);

    virtual int getGateToDestination() const;
    virtual void setGateToDestination(int gateToDestination);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RouteInfoPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RouteInfoPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Packet_m.msg:15</tt> by opp_msgtool.
 * <pre>
 * packet DHCPRequest
 * {
 *     string clientMAC;
 * }
 * </pre>
 */
class DHCPRequest : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string clientMAC;

  private:
    void copy(const DHCPRequest& other);

  protected:
    bool operator==(const DHCPRequest&) = delete;

  public:
    DHCPRequest(const char *name=nullptr, short kind=0);
    DHCPRequest(const DHCPRequest& other);
    virtual ~DHCPRequest();
    DHCPRequest& operator=(const DHCPRequest& other);
    virtual DHCPRequest *dup() const override {return new DHCPRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getClientMAC() const;
    virtual void setClientMAC(const char * clientMAC);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Packet_m.msg:19</tt> by opp_msgtool.
 * <pre>
 * packet DHCPResponse
 * {
 *     string clientMAC;
 *     int assignedAddr;
 * }
 * </pre>
 */
class DHCPResponse : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string clientMAC;
    int assignedAddr = 0;

  private:
    void copy(const DHCPResponse& other);

  protected:
    bool operator==(const DHCPResponse&) = delete;

  public:
    DHCPResponse(const char *name=nullptr, short kind=0);
    DHCPResponse(const DHCPResponse& other);
    virtual ~DHCPResponse();
    DHCPResponse& operator=(const DHCPResponse& other);
    virtual DHCPResponse *dup() const override {return new DHCPResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getClientMAC() const;
    virtual void setClientMAC(const char * clientMAC);

    virtual int getAssignedAddr() const;
    virtual void setAssignedAddr(int assignedAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Packet_m.msg:24</tt> by opp_msgtool.
 * <pre>
 * packet DNSQuery
 * {
 *     string hostname;
 *     int sourceAddr;
 * }
 * </pre>
 */
class DNSQuery : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string hostname;
    int sourceAddr = 0;

  private:
    void copy(const DNSQuery& other);

  protected:
    bool operator==(const DNSQuery&) = delete;

  public:
    DNSQuery(const char *name=nullptr, short kind=0);
    DNSQuery(const DNSQuery& other);
    virtual ~DNSQuery();
    DNSQuery& operator=(const DNSQuery& other);
    virtual DNSQuery *dup() const override {return new DNSQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getHostname() const;
    virtual void setHostname(const char * hostname);

    virtual int getSourceAddr() const;
    virtual void setSourceAddr(int sourceAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DNSQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DNSQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Packet_m.msg:29</tt> by opp_msgtool.
 * <pre>
 * packet DNSResponse
 * {
 *     string hostname;
 *     int ipAddr;
 * }
 * </pre>
 */
class DNSResponse : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string hostname;
    int ipAddr = 0;

  private:
    void copy(const DNSResponse& other);

  protected:
    bool operator==(const DNSResponse&) = delete;

  public:
    DNSResponse(const char *name=nullptr, short kind=0);
    DNSResponse(const DNSResponse& other);
    virtual ~DNSResponse();
    DNSResponse& operator=(const DNSResponse& other);
    virtual DNSResponse *dup() const override {return new DNSResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getHostname() const;
    virtual void setHostname(const char * hostname);

    virtual int getIpAddr() const;
    virtual void setIpAddr(int ipAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DNSResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DNSResponse& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline BasicPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<BasicPacket*>(ptr.get<cObject>()); }
template<> inline RouteInfoPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<RouteInfoPacket*>(ptr.get<cObject>()); }
template<> inline DHCPRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPRequest*>(ptr.get<cObject>()); }
template<> inline DHCPResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPResponse*>(ptr.get<cObject>()); }
template<> inline DNSQuery *fromAnyPtr(any_ptr ptr) { return check_and_cast<DNSQuery*>(ptr.get<cObject>()); }
template<> inline DNSResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<DNSResponse*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PACKET_M_M_H

